// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transfer.sql

package db

import (
	"context"
	"time"
)

const createNewTransfer = `-- name: CreateNewTransfer :one
INSERT INTO transfer(from_account_id,
                     to_account_id,
                     amount,
                     created_at)
VALUES ($1, $2, $3, $4) RETURNING transfer_id, from_account_id, to_account_id, amount, created_at
`

type CreateNewTransferParams struct {
	FromAccountID int64     `json:"from_account_id"`
	ToAccountID   int64     `json:"to_account_id"`
	Amount        int64     `json:"amount"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) CreateNewTransfer(ctx context.Context, arg CreateNewTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createNewTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.CreatedAt,
	)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransferByTransferId = `-- name: DeleteTransferByTransferId :exec
Delete from transfer where transfer_id = $1
`

func (q *Queries) DeleteTransferByTransferId(ctx context.Context, transferID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransferByTransferId, transferID)
	return err
}

const deleteTransferForAccountId = `-- name: DeleteTransferForAccountId :exec
Delete from transfer where from_account_id = $1 and to_account_id = $2
`

type DeleteTransferForAccountIdParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
}

func (q *Queries) DeleteTransferForAccountId(ctx context.Context, arg DeleteTransferForAccountIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteTransferForAccountId, arg.FromAccountID, arg.ToAccountID)
	return err
}

const getTransferById = `-- name: GetTransferById :one
select transfer_id, from_account_id, to_account_id, amount, created_at from transfer where transfer_id = $1 FOR NO KEY UPDATE
`

func (q *Queries) GetTransferById(ctx context.Context, transferID int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferById, transferID)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransferByFromAccountId = `-- name: ListTransferByFromAccountId :many
select transfer_id, from_account_id, to_account_id, amount, created_at from transfer where from_account_id = $1 limit $2 OFFSET $3 FOR NO KEY UPDATE
`

type ListTransferByFromAccountIdParams struct {
	FromAccountID int64 `json:"from_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListTransferByFromAccountId(ctx context.Context, arg ListTransferByFromAccountIdParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransferByFromAccountId, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.TransferID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransferByToAccountId = `-- name: ListTransferByToAccountId :many
select transfer_id, from_account_id, to_account_id, amount, created_at from transfer where to_account_id = $1 limit $2 OFFSET $3 FOR NO KEY UPDATE
`

type ListTransferByToAccountIdParams struct {
	ToAccountID int64 `json:"to_account_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListTransferByToAccountId(ctx context.Context, arg ListTransferByToAccountIdParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransferByToAccountId, arg.ToAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.TransferID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
